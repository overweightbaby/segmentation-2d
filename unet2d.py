def get_unet(x,y,nb_channel):
    inputs = Input((y,x,nb_channel))
    print(inputs.shape)
    conv1 = Conv2D(32, (3,3),padding = 'same', kernel_initializer = 'he_normal')(inputs)
    conv1=BatchNormalization()(conv1)
    conv1=Activation('relu')(conv1)
    print ("conv1 shape:",conv1.shape)
    conv1 = Conv2D(32, (3,3), padding = 'same', kernel_initializer = 'he_normal')(conv1)
    print ("conv1 shape:",conv1.shape)
    conv1=BatchNormalization()(conv1)
    conv1=Activation('relu')(conv1)

    pool1 = MaxPooling2D(pool_size=(2,2),strides=[2,2])(conv1)
    print("pool1 shape:",pool1.shape)
    conv2 = Conv2D(64, (3,3),padding = 'same', kernel_initializer = 'he_normal')(pool1)
    conv2=BatchNormalization()(conv2)
    conv2=Activation('relu')(conv2)
    print("conv2 shape:",conv2.shape)
    conv2 = Conv2D(64, (3,3),padding = 'same', kernel_initializer = 'he_normal')(conv2)
    print("conv2 shape:",conv2.shape)
    conv2=BatchNormalization()(conv2)
    conv2=Activation('relu')(conv2)

    pool2 = MaxPooling2D(pool_size=(2,2))(conv2)
    print("pool2 shape:",pool2.shape)
    conv3 = Conv2D(128, (3,3),padding = 'same', kernel_initializer = 'he_normal')(pool2)
    print("conv3 shape:",conv3.shape)
    conv3=BatchNormalization()(conv3)
    conv3=Activation('relu')(conv3)
    conv3 = Conv2D(128, (3,3),padding = 'same', kernel_initializer = 'he_normal')(conv3)
    conv3=BatchNormalization()(conv3)
    conv3=Activation('relu')(conv3)
    print("conv3 shape:",conv3.shape)

    pool3 = MaxPooling2D(pool_size=(2,2))(conv3)
    print("pool3 shape:",pool3.shape)
    conv4=Conv2D(128, (3,3),padding = 'same', kernel_initializer = 'he_normal')(pool3)
    conv4=BatchNormalization()(conv4)
    conv4=Activation('relu')(conv4) 
    conv4 = Conv2D(128,(3,3),padding = 'same', kernel_initializer = 'he_normal')(conv4)
    conv4=BatchNormalization()(conv4)
    conv4=Activation('relu')(conv4)

    up5 = Conv2D(128,2,padding='same')(UpSampling2D(size = (2,2))(conv4))
    print("up5 shape:",up5.shape)
    up5=BatchNormalization()(up5)
    up5=Activation('relu')(up5)
    merge5 = Concatenate(axis=3)([conv3,up5])
    print(merge5.shape)
    conv5 = Conv2D(128,(3,3),padding = 'same', kernel_initializer = 'he_normal')(merge5)
    conv5 = Conv2D(128,(3,3),padding = 'same', kernel_initializer = 'he_normal')(conv5)

    up6 = Conv2D(64,2,padding='same')(UpSampling2D(size = (2,2))(conv5))
    up6=BatchNormalization()(up6)
    up6=Activation('relu')(up6)
    merge6 = Concatenate(axis = 3)([conv2,up6])
    conv6 = Conv2D(64,(3,3), padding = 'same', kernel_initializer = 'he_normal')(merge6)
    conv6 = Conv2D(64,(3,3), padding = 'same', kernel_initializer = 'he_normal')(conv6)

    up7 =Conv2D(32,2,activation='relu',padding='same')(UpSampling2D(size =(2,2))(conv6))
    up7=BatchNormalization()(up7)
    up7=Activation('relu')(up7)
    merge7 = Concatenate(axis = 3)([conv1,up7])
    conv7= Conv2D(32, 3, activation = 'relu',padding = 'same', kernel_initializer = 'he_normal')(merge7)
    conv7 = Conv2D(32, 3,activation = 'relu',padding = 'same', kernel_initializer = 'he_normal')(conv7)
    conv7 = Conv2D(1,(1,1), activation = 'sigmoid')(conv7)

    model = Model(input = inputs, output = conv7)
    model.summary()
    model.compile(optimizer = Adam(lr = 0.0001), loss = 'binary_crossentropy', metrics = ['accuracy'])

    return model
